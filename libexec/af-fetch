#!/usr/bin/env python
# Usage: af fetch [<folder-id>]
# Summary: Fetch folder contents into current directory
# Help: Check if results are delivered and download all and any results folders.
# <folder-id> overrides this behaviour, downloading any provided id.

import requests
from requests.auth import HTTPBasicAuth as rauth
import sys
import os
import os.path
import json
import time


def read_config(path):
    try:
        with open(path) as f:
            return json.load(f)
    except (IOError,ValueError):
        return None


def fetch(source, destination, path=''):
    remote = os.path.join(source, path)
    local = os.path.join(destination, path)
    r = requests.get(remote, verify=False, auth=auth)
    if r.status_code is 201:
        os.makedirs(local)
        for obj in r.json():
            new_path = os.path.join(path, obj)
            fetch(source, destination, new_path)
    elif r.status_code is 200:
        with open(local, 'w+') as f:
            f.write(r.content)
    else:
        print(r.status_code)


# Get config
config = read_config(os.path.expanduser("~/.activefolders"))
if os.path.exists("./.activefolders"):
    config = read_config("./.activefolders")

if config:
    url = config['url']
    auth = rauth(config['secret'], None)
else:
    print("No connection found, please run `connect` first")
    sys.exit(0)


# Parse arguments
if len(sys.argv) > 1:
    folder = sys.argv[1]
    source = os.path.join(url, "folders", folder, "files")
    destination = os.path.join("./results", folder)
    fetch(source, destination)
    sys.exit(0)


if not config.get('folder'):
    print("This directory hasn't been uploaded yet")
    sys.exit(0)

folder = config['folder']

# Check for results folders and download if any are present
r = requests.get(os.path.join(url, "folders", folder, "results" ), verify=False, auth=auth)
for destination, results_folder in r.json().items():
    if results_folder:
        print(destination+"\t"+results_folder)
        source = os.path.join(url, "folders", results_folder, "files")
        destination = os.path.join("./results", destination)
        fetch(source, destination)
    else:
        print(destination+"\t"+"Nothing yet")

