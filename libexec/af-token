#!/usr/bin/env python
# Usage: af token add <username> | del <username> <token> | show <username> [<token>]
# Summary: Add or delete user tokens
# Help: This interaction is accessible only to root tokens and sibling tokens


import requests
from requests.auth import HTTPBasicAuth as rauth
import sys
import os
import os.path
import json


def read_config(path):
    try:
        with open(path) as f:
            return json.load(f)
    except (IOError, ValueError):
        return None

# Get config
config = read_config(os.path.expanduser("~/.activefolders"))
if os.path.exists("./.activefolders"):
    config = read_config("./.activefolders")
if config:
    url = config['url']
    auth = rauth(config['secret'], None)
else:
    print("No connection found, please run `connect` first")
    sys.exit(0)

# Parse arguments
try:
    action, username = sys.argv[1:3]
    try:
        token = sys.argv[3]
    except (ValueError, IndexError):
        if action in ["show", "add"]:
            token = None
        else:
            raise
    if action not in ["add", "del", "show"]:
        raise ValueError("Wrong action")
except (ValueError, IndexError):
    print("Usage: af token add <username> | del <username> <token> | show <username> [<token>]")
    sys.exit(0)

user_url = os.path.join(url, "users", username)
if token:
    token_url = os.path.join(user_url, "tokens", token)
else:
    token_url = os.path.join(user_url, "tokens")

if action == "add":
    r = requests.post(token_url, verify=False, auth=auth)
elif action == "del":
    r = requests.delete(token_url, verify=False, auth=auth)
elif action == "show":
    r = requests.get(token_url, verify=False, auth=auth)

if r.status_code / 100 is 2:
    print(r.text)
else:
    print "Error code: ", r.status_code
    sys.exit(r.status_code)
